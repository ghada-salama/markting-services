<?php

namespace AppBundle\Repository;

/**
 * shops_hqRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class shopsRepository extends \Doctrine\ORM\EntityRepository
{

        public function getMyShops($brand_id,$activity_id)
        {
            //print($brand_id); print("---");  print($activity_id);die();
            $query = $this->createQueryBuilder('a');
            $query->andWhere('a.activity=  :activity');
            $query->setParameter('activity', $activity_id);

            $query->andWhere('a.brand=  :brand_id');
            $query->setParameter('brand_id', $brand_id); 

            $query = $query->getQuery();
           // dump($query->getSql());die();
            $shops=$query->getOneOrNullResult();
           
           // dump($shops);die();
            return $shops;
        }

        //get total shops for brand and subbrand
        public function getMaxShops($brand_id,$activity_id)
        {
           // $parentBrand=['id'=>$brand_id];
            $brands=['id'=>$brand_id];
            
            //check if brand has sub barnd
            $subBrands=$this->getEntityManager()->getRepository('AppBundle:Brand')->getSubBrandsById($brand_id);
            //dump($subBrands);die;
            $query = $this->createQueryBuilder('a');
            $query->select('sum(a.shopsHqValue) as shops_hq,sum(a.shopsGpvValue) as shops_gpv');
            $query->andWhere('a.activity=  :activity');
            $query->setParameter('activity', $activity_id);
            if(count($subBrands))
            { 
                //set brands 
                $brands=$subBrands;
                array_push($brands,['id'=>$brand_id]);
            }
            //dump($activity_id);die;

            $query->andWhere('a.brand in  (:brands)');
            $query->setParameter('brands', $brands);  
            $query = $query->getQuery();
            //dump($query->getSql());die;
            $shops=$query->getOneOrNullResult();
            $total=$shops['shops_hq']+$shops['shops_gpv'];
            return $total;
           // dump($total);

        }
        public function getOneShops($brand_id,$activity_id)
        {
           
            
           //dump($activity_id);die();
            $query = $this->createQueryBuilder('a');
                        
                        $query->where('a.activity=  :activity');
                        $query->setParameter('activity', $activity_id);
                        $query->andWhere('a.brand=  :brand_id');
                        $query->setParameter('brand_id', $brand_id);  
                        $query = $query->getQuery();
            return $query->getOneOrNullResult();
        }

        //get hq shops
        public function getShops($brand_id,$activity_id)
        {
           
            
           //dump($subBrands);die();
            $query = $this->createQueryBuilder('a');
                        $query->select('a.id,a.shopsHqValue as shops_hq,a.shopsGpvValue as shops_gpv');
                        $query->andWhere('a.activity=  :activity');
                        $query->setParameter('activity', $activity_id);
                        $query->andWhere('a.brand=  :brand_id');
                        $query->setParameter('brand_id', $brand_id);  
                        $query = $query->getQuery();
            $shops=$query->getOneOrNullResult();
            //dump($shops);die();
            $shops=[
                'shops_hq'=>$shops['shops_hq'],
                'shops_gpv'=>$shops['shops_gpv'],
                'total_Shops'=>$shops['shops_hq']+$shops['shops_gpv']
            ];
            $data[]=$shops;
           // dump($data);die();
            $subBrands=$this->getEntityManager()->getRepository('AppBundle:Brand')->getSubBrandsById($brand_id);
            //dump($subBrands);die();
            if(count($subBrands))
            { 
                $subbrandsShops=$this->getsubBrandShops($subBrands,$activity_id);
                foreach ($subbrandsShops as $key => $value) {
                    $subshops[str_replace(' ', '_',$value['name'])]=[
                        'hq_shops'=>$value['hq_shops'],
                        'gpv_shops'=>$value['gpv_shops'],
                        'total_Shops'=>$value['shops_hq']+$value['shops_gpv']
                    ];
                   
                    $data[]=$subshops;
                }
               
                dump($data);die();
            }



        }

        //get hq shops
        public function getsubBrandShops($subBrands,$activity_id)
        {
                //dump($subBrands);die();
                $query = $this->createQueryBuilder('a');
                $query->select('a.id,a.shopsHqValue as shops_hq,a.shopsGpvValue as shops_gpv,b.name');
                $query->andWhere('a.activity=  :activity');
                $query->setParameter('activity', $activity_id);
                $query->andWhere('a.brand in  (:brand_id)');
                $query->setParameter('brand_id', $subBrands);
                $query->leftJoin('a.brand', 'b');

                $query = $query->getQuery();
                return $query->getResult();
            
            

        


        }


        //


        //get gpv shops
        public function getShopsGPV($brand_id,$activity_id)
        {
            //die("asasa");
            //$brand_id=1;
            $subBrands=$this->getEntityManager()->getRepository('AppBundle:Brand')->getSubBrandsById($brand_id);
            // dump($subBrands) ;die("asasa");
            $query = $this->createQueryBuilder('a');
                        $query->select('a.shopsGpvValue');
                        $query->where('a.activity=  :activity_id');
                        $query->setParameter('activity_id', $activity_id);
                        // brand has subbrands
                        if(count($subBrands)){
                            //die("sdsds");
                            array_push($subBrands,$brand_id);
                            // get brand and sub brand shops hq
                            $query->andWhere('a.brand in (:brand_id)');
                            $query->setParameter('brand_id', $subBrands);
    
                        }else{
                            // die("sdsds");
                            $query->andWhere('a.brand=  :id');
                            $query->setParameter('id', $brand_id);

                        }
    
                        $query = $query->getQuery();
                        //$query->getSql();
                        $shopshq= $query->getArrayResult();
                        return $shopshq;
    
    
    
        
        }

      
}
