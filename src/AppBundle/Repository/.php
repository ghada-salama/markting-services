<?php

namespace AppBundle\Repository;

/**
 * BrandRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BrandRepository extends \Doctrine\ORM\EntityRepository
{

    public function getGrid($brand_id,$filters)
    { 
       //die("sdsds");
        $query = $this->createQueryBuilder('c');
                 $query->select('c.id,c.name,c.brandOrder,c.imageH');
                 $query->where('c.id=  :id');
                 $query->where('c.flag !=  1');
                 $query->setParameter('id', $brand_id);

        $query = $query->getQuery();
        $client= $query->getOneOrNullResult();

        //get client details
        
        $brands=[];
        if(!count($filters['clients'])==0)
        { 
            $clients=$this->getEntityManager()->getRepository('AppBundle:Client')->getClientsById($filters['clients']);;
        }else
        {
            //all_brands and all_clientd mode
            $clients=$this->getEntityManager()->getRepository('AppBundle:Client')->getClients();
        }

        $result['brands']['data']=$this->getEntityManager()->getRepository('AppBundle:Activity')->getTitlesList($clients,$filters);
        $result['brands']['name']=$client['name'];
        $result['brands']['value']=$client['id'];
        $result['brands']['imageH']=$client['imageH'];
        return $result;      
        
    }

    public function getBrands()
    {
        
        $query = $this->createQueryBuilder('b');
                 $query->select('b.id,b.name,b.brandOrder,b.imageH');
                 $query->where('b.flag !=  1');
                //  $query->where('b.parent =  :my_parent');
                //  $query->setParameter('my_parent',0);
                 $query = $query->getQuery();
        return $query->getResult();
    
        
    }
    public function getBrandsById($ids)
    {
        
        $query = $this->createQueryBuilder('b');
                 $query->select('b.id,b.name,b.brandOrder,b.imageH');
                 $query->Where('b.id in (:id)');
                 $query->andWhere('b.flag !=  1');
                 $query->setParameter('id',$ids);
                 $query = $query->getQuery();
        return   $query->getResult();
    }

 


    public function getBrandsObjectById($ids)
    {
        
        $query = $this->createQueryBuilder('b');
               //  $query->select('b.id,b.name,b.brandOrder,b.imageH');
                 $query->Where('b.id in (:id)');
                 $query->setParameter('id',$ids);
                 $query = $query->getQuery();
        return   $query->getResult();
    }

    public function getsubBrands($id)
    {
        
        $query = $this->createQueryBuilder('b');
                // $query->select('b.name');
                 $query->Where('b.parent in (:parent)');
                 $query->setParameter('parent',$id);
                 $query = $query->getQuery();
        return $query->getArrayResult();
    }
    public function getsubBrandsObj($id)
    {
        
        $query = $this->createQueryBuilder('b');
                // $query->select('b.name');
                 $query->Where('b.parent in (:parent)');
                 $query->setParameter('parent',$id);
                 $query = $query->getQuery();
        return $query->getResult();
    }

    public function getbrandAndsubBrands()
    {
        
        $query = $this->createQueryBuilder('b');
        $query->select('b,b2');
                // $query->select('b.id as parentId,b.name as parentName,b2.id as subId ,b2.name as subName');
                 $query->leftJoin('AppBundle:Brand','b2','WITH','b.id = b2.parent');
                // $query->orderBy('b.id','ASC');
                // $query->addOrderBy('b.parent','ASC');
                $query->where('b.parent is null');
                 $query = $query->getQuery();
        //dump($query->getArrayResult());die();
        return $query->getResult();
    }

    public function getSubBrandsById($ids)
    {
        
        $query = $this->createQueryBuilder('b');
                 $query->select('b.id');
                 $query->Where('b.parent in (:parent)');
                 $query->setParameter('parent',$ids);
                 $query = $query->getQuery();
        return $query->getArrayResult();
    }


    public function getbrand($brand_id,$year,$client_id,$filters)
    {
            //echo $brand_id;
            // die();
        $query = $this->createQueryBuilder('b');
                 $query->select('b.id,b.name,b.brandOrder,b.imageH');
                 $query->where('b.id=  :id');
                 $query->setParameter('id',$brand_id);

        $query = $query->getQuery();
        $brand=$query->getOneOrNullResult();
        //$data[$brand_id]=$brand;
      //  $data[$brand_id]['data']['years'][$year]=[ 'name'=>$year];
        $data['data']=$this->getEntityManager()->getRepository('AppBundle:Activity')->getactivitiesList($brand_id,$year,$client_id,$filters);

        if($filters['show_last_year']==1){
            $year=$year-1;
          //  $data[$brand_id]['data']['years'][$year]=[ 'name'=>$year];
          //  $data[$brand_id]['data']['years'][$year]['data']=$this->getEntityManager()->getRepository('AppBundle:Activity')->getactivitiesList($brand_id,$year,$client_id,$filters);
           // array_reverse($data[$brand_id]['data']['years']);
           //ksort($data);
        }
        //$this->getEntityManager()->getRepository('AppBundle:Activity')->getactivitiesList($brand_id,$year,$client_id,$filters);
        
        return $data;
    }

        //get activits in all brands group by year
        public function getbrandActivities($brand_id,$filters)
        {
            $clients=[];
            if(!count($filters['clients'])==0)
            { 
                $clients=$this->getEntityManager()->getRepository('AppBundle:Client')->getClientsById($filters['clients']);;
            }else
            {
                //all_brands and all_clientd mode
                $clients=$this->getEntityManager()->getRepository('AppBundle:Client')->getClients();
            }
            //dump($clients);die();
            //loop on brands and get list of activities
            $result=[];
            foreach ($clients as  $client) {
                //echo $brand;die();
                //get all activity in each year
                $year=$filters['year'];
                $result[$client['id']][$filters['year']][]=$this->getEntityManager()->getRepository('AppBundle:Activity')->getActivities($client['id'],$brand_id,$filters,$year);
    
                if($filters['show_last_year'])
                {
                    $year=$filters['year']-1;
                    $result[$client['id']][$year][]=$this->getEntityManager()->getRepository('AppBundle:Activity')->getActivities($client['id'],$brand_id,$filters, $year);
                }
            }
            
            return $result;
            
        }
}
