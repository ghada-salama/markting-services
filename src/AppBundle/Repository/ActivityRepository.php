<?php

namespace AppBundle\Repository;
use Symfony\Component\Translation\Translator;
use AppBundle\Entity\Activity;
/**
 * ActivityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ActivityRepository extends \Doctrine\ORM\EntityRepository
{

            public function getAll()
            { 
                return $this->createQueryBuilder('c')
                            ->setMaxResults(5)
                            // ->setFirstResult($offset)
                            ->getQuery()
                            ->getResult();
            }

        //retuen  client if mode 0 otherwise return brand
        public function getView($mode,$id)
        {
            $view=[];
            if($mode==0)
            {
                $view=$this->getEntityManager()->getRepository('AppBundle:Client')->find($id);
            }else
            {
                //all_brands and all_clientd mode
                $view=$this->getEntityManager()->getRepository('AppBundle:Brand')->find($id);
            }
            //dump($view);die;
            return $view;
        }

        //retuen  brands if mode 0 otherwise return clients
        public function getRows($mode,$rows,$healthcare=null,$household=null)
        {
            
                
        
            $my_rows=[];
            if($mode==0)
            {
                if(!count($rows)==0)
                {
                    //die("sdfsds");
                    $my_rows=$this->getEntityManager()->getRepository('AppBundle:Brand')->getBrandsById($rows,$healthcare,$household);//getBrandsOrderByNameById($rows);//
                    //return
                }else
                {
                   // die("sds");
                   
                    //all_brands and all_clientd mode
                    $my_rows=$this->getEntityManager()->getRepository('AppBundle:Brand')->getBrands($healthcare,$household);//getBrandsOrderByName();//
                   // dump($my_rows);die();
                }
            }else
            {

                if(!count($rows)==0)
                {
                    $my_rows=$this->getEntityManager()->getRepository('AppBundle:Client')->getClientsOrderByNameById($rows);//getClientsById(($rows));
                }else
                {
                    //all_brands and all_clientd mode
                    $my_rows=$this->getEntityManager()->getRepository('AppBundle:Client')->getClientsOrderByName();//getClients();
                }
            }
           // dump($my_rows);die();
            return $my_rows;
        }

        public function getRowsExport($mode,$rows)
        {
            
            $my_rows=[];
            if($mode==0)
            {
                if(!count($rows)==0)
                {
                    //die("sdfsds");
                    $my_rows=$this->getEntityManager()->getRepository('AppBundle:Brand')->getBrandsByIdExport($rows);//getBrandsOrderByNameById($rows);//
                   // dump($my_rows);die("dddd");
                    //return
                }else
                {
                   // die("sds");
                   
                    //all_brands and all_clientd mode
                    $my_rows=$this->getEntityManager()->getRepository('AppBundle:Brand')->getBrandExport();//getBrandsOrderByName();//
                   // dump($my_rows);die();
                }
            }else
            {

                if(!count($rows)==0)
                {
                   // dump($rows);die;
                    $my_rows=$this->getEntityManager()->getRepository('AppBundle:Client')->getClientsExport($rows);//getClientsById(($rows));
                }else
                {
                    //all_brands and all_clientd mode
                    $my_rows=$this->getEntityManager()->getRepository('AppBundle:Client')->getClientsNameExport();//getClients();
                }
            }
            //dump($my_rows);die();
            return $my_rows;
        }

   


        public function getActivities($mode,$id,$rows,$filters)
        {
            //die("sssss");
           //return client  if mode ==0 and brand  if mode ==1  
            $view=$this->getView($mode,$id);
            //dump($view);die; 
            $result['view']['name']=$view->getName();
            //$result['view']['image']=$view->getImageUrl();
          //  dump($result);die;
            $result['view']['value']=$view->getId();
            $result['view']['imageH']=$view->getImageH();
      
            $result['view']['maxShops']=null;
            if($mode==0)
            {
                $result['view']['maxShops']=$view->getMaxShops();
            }
            //get rows
            
            $my_rows=$this->getRows($mode,$rows,$filters['healthcare'],$filters['household']); //return brands if mode ==0 and clients if mode ==1 
            //
            if($filters['healthcare']==0 && $filters['household']==0){
                $my_rows=[];
            }
            $result['view']['data']=$this->getEntityManager()->getRepository('AppBundle:Activity')->getTitlesList($mode,$id,$my_rows,$filters,$view);
            $result['view']['data']['monthes']=$filters['translated_monthes'];
            //dump($result);die;
            return $result;


        }
    
        public function getActivitiesExport($mode,$id,$rows,$filters)
        {
            $view=$this->getView($mode,$id);
            //get rows
            $my_rows=$this->getRows($mode,$rows); //return brands if mode ==0 and clients if mode ==1 
            return $this->getEntityManager()->getRepository('AppBundle:Activity')->getTitlesList($mode,$id,$my_rows,$filters,$view);
        }
    public function getYears($filters)
    {
        //dump($filters);
        $year=[
            'name'=>$filters['year'],
            'last'=>false,
        ];
        $years[]=$year;
        if($filters['show_last_year']==true)
        {
            $lastyear=[
                'name'=>($filters['year']-1),
                'last'=>true,
            ];
          //  die("sdsd");
         array_push($years,$lastyear);
        }
       //dump($years);
        return $years;

    }

    public function getYearsName($filters)
    {
        //return($filters);die;
        $years[]=(int)$filters['year'];
        
        if($filters['show_last_year']==true)
        {
           
          //  die("sdsd");
         array_push($years,($filters['year']-1));
        }
      // return($years);die;
        return $years;

    }



    //get get Quarters and activity list
    public function getTitlesList($mode,$id,$rows,$filters,$view)
    {
       // dump($rows);die();
        $years=$this->getYears($filters);
        $result=[];
       //$type=$filters['viewmode']==1?"brands":"clients";
       foreach ($rows as $key => $row) 
       {
       //get client or brand image 
        $rowobj=$mode!=0?$this->getEntityManager()->getRepository('AppBundle:Client')->find($row['id']):$this->getEntityManager()->getRepository('AppBundle:Brand')->find($row['id']);
       // dump($rowobj);die;
       //get row (client or brand)
        $result['rows'][$key]['name']=$row['name'];
        $result['rows'][$key]['imageH']=$rowobj->getImageH();//$row['imageH']$rowobj->getImageH();//$row['imageH'];//$rowobj->getImageUrl();
       // $result['view']['imageH']=$row->getImageUrl();
        $result['rows'][$key]['value']=$row['id'];
        $result['rows'][$key]['years']=$this->getYearsName($filters);

        //get  qurteres per row  
        $result['rows'][$key]['quarters']=$this->getQuarters($mode,$id,$row,$filters);
        $result['rows'][$key]['data']=$this->getSortedActivities($mode,$id,$row,$filters,$years);

        $result['rows'][$key]['maxShops']=null;
            if($mode==0)
            {
                $result['rows'][$key]['maxShops']=$view->getMaxShops();
            }
       }

        return $result;

    }

        //get get Quarters and activity list
        public function getAllRows($mode,$id,$rows,$filters,$view)
        {
            $result=[];
            $view=$this->getView($mode,$id); //return client or brand related to view
            $years=$this->getYears($filters);

           foreach ($rows as $key => $row) 
           {
           //get row (client or brand)
            $result['rows'][$key]['name']=$row['name'];
            $result['rows'][$key]['value']=$row['id'];
            $result['rows'][$key]['years']=$this->getYearsName($filters);
            //get  qurteres per row  
            $result['rows'][$key]['quarters']=$this->getQuarters($mode,$id,$row,$filters);
            $result['rows'][$key]['data']=$this->getSortedActivities($mode,$id,$row,$filters,$years);

           }
            return $result;
    
        }


    //return month range
    public function getMonthes($filters)
    {
       // return $filters['translated_monthes'];
        $end_month=($filters['start_month']+$filters['number_month'])-1;
        $months = range($filters['start_month'],($filters['start_month']+$filters['number_month'])-1);
        
        return $months;
    }

    //return
    public function getQuarters($mode,$id,$row,$filters)
    {
          // dump($filters['titles']);die();
            $translated_titles=[];
                        $i=0;
                        foreach($filters['titles'] as $key=>$translated_value)
                        {

                                $data=['name'=>$translated_value,'value'=>$key];
                                $translated_titles[]=$data;
                                //insert sub brands if found

                                //if mode ==0 get sub of row else get sub of id
                                $brand_id=$mode==0?$row['id']:$id;

                                // if($mode==0)
                                // {
                                    $subBrand=$this->getEntityManager()->getRepository('AppBundle:Brand')->getsubBrands($brand_id);
                                    if(($key=='hq_shops')&&count($subBrand))
                                    {

                                        //switch
                                            foreach ($subBrand as $key2 => $sunBrand)
                                            {
                                                $data=['name'=>$sunBrand['name'] ,'value'=>'hq_' . $sunBrand['id'],"isShop"=>true,"isHq"=>true,"gpv"=>'gpv_' . $sunBrand['id']];
                                               $translated_titles[]=$data;
                                            }

                                    }
                                    if(($key=='gpv_shops')&&count($subBrand))
                                    {

                                        //switch
                                            foreach ($subBrand as $key2 => $sunBrand)
                                            {
                                                $data=['name'=>$sunBrand['name'],'value'=>'gpv_' . $sunBrand['id'],"isGpv"=>true];
                                                $translated_titles[]=$data;
                                            }

                                    }
                                    if(($key=='total_shops')&&count($subBrand))
                                    {

                                        //switch
                                            foreach ($subBrand as $key2 => $sunBrand)
                                            {
                                                $data=['name'=> $sunBrand['name'],'value'=>'total_' . $sunBrand['id']];
                                               $translated_titles[]=$data;
                                            }

                                    }

                              //  }

                        }
                        return $translated_titles;


        }

           //return
    public function getQuartersExport($mode,$id,$row,$filters)
    {
          // dump($filters['titles']);die();
            $translated_titles=[];
                        $i=0;
                        foreach($filters['titles'] as $key=>$translated_value)
                        {

                                $data=['name'=>$translated_value,'value'=>$key];
                                $translated_titles[]=$data;
                                //insert sub brands if found

                                //if mode ==0 get sub of row else get sub of id
                                $brand_id=$mode==0?$row->getId():$id;

                                // if($mode==0)
                                // {
                                    $subBrand=$this->getEntityManager()->getRepository('AppBundle:Brand')->getsubBrands($brand_id);
                                    if(($key=='hq_shops')&&count($subBrand))
                                    {

                                        //switch
                                            foreach ($subBrand as $key2 => $sunBrand)
                                            {
                                                $data=['name'=>$sunBrand['name'] ,'value'=>'hq_' . $sunBrand['id'],"isShop"=>true,"isHq"=>true,"gpv"=>'gpv_' . $sunBrand['id']];
                                               $translated_titles[]=$data;
                                            }

                                    }
                                    if(($key=='gpv_shops')&&count($subBrand))
                                    {

                                        //switch
                                            foreach ($subBrand as $key2 => $sunBrand)
                                            {
                                                $data=['name'=>$sunBrand['name'],'value'=>'gpv_' . $sunBrand['id'],"isGpv"=>true];
                                               $translated_titles[]=$data;
                                            }

                                    }
                                    if(($key=='total_shops')&&count($subBrand))
                                    {

                                        //switch
                                            foreach ($subBrand as $key2 => $sunBrand)
                                            {
                                                $data=['name'=> $sunBrand['name'],'value'=>'total_' . $sunBrand['id']];
                                               $translated_titles[]=$data;
                                            }

                                    }

                              //  }

                        }
                        return $translated_titles;


        }

        public function getFc($client_id,$brand_id,$year,$month)
        {
            $fc=$this->getEntityManager()->getRepository('AppBundle:Fc')->getFc($client_id,$brand_id,$year,$month);
            //return $fc['fc'];
            if($fc)
            {
                return $fc['fc']/1000; 
            }
            return '0.00';
        }

        public function getNr($client_id,$brand_id,$year,$month)
        {
            //get nr 
            $nr=$this->getEntityManager()->getRepository('AppBundle:Nr')->getNr($client_id,$brand_id,$year,$month);
            if($nr)
            {
                return $nr/1000; 
            }
            return '0.00';
        }


        public function getNrVsLy($client_id,$brand_id,$year,$month)
        {
           // return $year;
             //get nr 
             $nrPres=0;
             $nr_lyPres=0;
             $nr=$this->getEntityManager()->getRepository('AppBundle:Nr')->getNr($client_id,$brand_id,$year,$month);
           
             $nr_ly=$this->getEntityManager()->getRepository('AppBundle:Nr')->getNr($client_id,$brand_id,($year-1),$month);
             //return ($year-1);
             if($nr)
             {
                $nrPres=$nr/1000;  
             }
             //return $nr;
             if($nr_ly)
             {
                $nr_lyPres=$nr_ly/1000;  
             }
            // $nrPres=$nr/1000;
             
             if($nrPres && $nr_lyPres)
             {
                 $nr_vs_ly=(($nrPres-$nr_lyPres)/$nr_lyPres)*100;
                 return number_format($nr_vs_ly,2).'%'; 
             }
             return '0.00';
        }




        //sort activites list and add empty activites per row (brand or client)
    public function  getSortedActivities($mode,$id,$row,$filters,$years)
    {
        //get years

        //set
        $client_id=$mode==0?$id:$row['id'];
        $client= $this->getEntityManager()->getRepository('AppBundle:Client')->find($client_id);
        $brand_id=$mode==0?$row['id']:$id;
        $activity_id;
        $result=[];
        $activites=$this->getActivitiyData($mode,$id,$row,$filters);
        $result=$activites['activites'];
       // dump($result);die;
        $years=$this->getYears($filters);
        $months=$this->getMonthsRang($filters);//$filters['translated_monthes'];
        //dump($months);die;
                foreach ($months as $rang) 
                {
              
                    //loop half
                    for ($half=1; $half <=2 ; $half++)
                     {
                        $month=$rang['month'];
                        $year=$rang['year'];
                         $halfItem = [];
                          
                        //loop  on years
                        $activity_id=$client_id.'-'.$brand_id.'-'.$year.'-'.$month.'-'.$half;
                        $index=$this->multidimensional_search($result, array('my_month'=>$month, 'half'=>$half,'my_year'=>$year));

                        if(!$result)
                        {
                            $index="notfound";
                        }
                        if($index==="notfound")
                            {
                                 $my_activity=new Activity();
                                 $my_activity->setClient($client);
                                 $my_activity->setWYear($year);
                                 $my_activity->setWMonth($month);
                                 $my_activity->setWHalf($half);
                                 $emptyActivity=true;
                                $obj=$this->FormateActivity($filters,$my_activity,null,$activity_id,$client_id,$brand_id,$year,$month,$emptyActivity);
                                $halfItem[] = $obj;

                            }else
                            {
                                //activity found 
                                $result[$index]['id']=$activity_id;
                                $my_activity=$result[$index]['activity'];
                                
                                //set last year flage true to set all node as readonly
                                $emptyActivity=false;
                                $obj=$this->FormateActivity($filters,$my_activity,null,$activity_id,$client_id,$brand_id,$year,$month,$emptyActivity);
                                $halfItem[] = $obj;//$result[$index];

                            }
                            
                           // $lastYear=$yearObj['last'];//$filters['show_last_year'];
                          if($filters['show_last_year']){
                           //loop  on years
                           $year = $year-1;
                           $activity_id=$client_id.'-'.$brand_id.'-'.$year.'-'.$month.'-'.$half;
                           $index=$this->multidimensional_search($result, array('my_month'=>(int)$month, 'half'=>$half,'my_year'=>$year));

                           if(!$result)
                           {
                               $index="notfound";
                           }
                           if($index==="notfound")
                               {
                                    $my_activity=new Activity();
                                    $my_activity->setClient($client);
                                    $my_activity->setWYear($year);
                                    $my_activity->setWMonth($month);
                                    $my_activity->setWHalf($half);
                                    $emptyActivity=true;
                                   $obj=$this->FormateActivity($filters,$my_activity,null,$activity_id,$client_id,$brand_id,$year,$month,$emptyActivity);
                                   $halfItem[] = $obj;

                               }else
                               {
                                   //activity found 
                                   $result[$index]['id']=$activity_id;
                                   $my_activity=$result[$index]['activity'];
                                   //dump($my_activity);echo $activity_id;die;
                                   //set last year flage true to set all node as readonly
                                   $emptyActivity=false;
                                   $obj=$this->FormateActivity($filters,$my_activity,null,$activity_id,$client_id,$brand_id,$year,$month,$emptyActivity);
                                   $halfItem[] = $obj;//$result[$index];

                               }
                          }
 

                        //dump($halfItem);die();
                        $activites[]=array('value'=>$halfItem);

                    }
                }
                return $activites;
    }

  

    //sort activites list and add empty activites per row (brand or client)
    public function  getSortedActivitiesExcel($mode,$id,$row,$filters,$years)
    {
        //get years

        //set
        $client_id=$mode==0?$id:$row->getId();
        $client= $this->getEntityManager()->getRepository('AppBundle:Client')->find($client_id);
        $brand_id=$mode==0?$row->getId():$id;
        $activity_id;
        $result=[];
        $my_activites=$this->getActivitiyDataExport($mode,$id,$row,$filters);
        $result=$my_activites['activites'];
       // return $result;die;
       // dump($result);die;
        $years=$this->getYears($filters);
        $months=$this->getMonthsRang($filters);//$filters['translated_monthes'];
        //dump($months);die;
                foreach ($months as $rang) 
                {
              
                    //loop half
                    for ($half=1; $half <=2 ; $half++)
                     {
                        $month=$rang['month'];
                        $year=$rang['year'];
                         $halfItem = [];
                          
                        //loop  on years
                        $activity_id=$client_id.'-'.$brand_id.'-'.$year.'-'.$month.'-'.$half;
                        $index=$this->multidimensional_search($result, array('my_month'=>$month, 'half'=>$half,'my_year'=>$year));

                        if(!$result)
                        {
                            $index="notfound";
                        }
                        if($index==="notfound")
                            {
                                 $my_activity=new Activity();
                                 $my_activity->setClient($client);
                                 $my_activity->setWYear($year);
                                 $my_activity->setWMonth($month);
                                 $my_activity->setWHalf($half);
                                 $emptyActivity=true;
                                 //dump($my_activity);die;
                                $obj=$this->FormateActivity($filters,$my_activity,null,$activity_id,$client_id,$brand_id,$year,$month,$emptyActivity);
                                $activites[$year][] = $obj;

                            }else
                            {
                                //activity found 
                                $result[$index]['id']=$activity_id;
                                $my_activity=$result[$index]['activity'];
                                
                                //set last year flage true to set all node as readonly
                                $emptyActivity=false;
                                $obj=$this->FormateActivity($filters,$my_activity,null,$activity_id,$client_id,$brand_id,$year,$month,$emptyActivity);
                                $activites[$year][] = $obj;//$result[$index];

                            }
                            
                           // $lastYear=$yearObj['last'];//$filters['show_last_year'];
                          if($filters['show_last_year']){
                            //  die("sdsd");
                           //loop  on years
                           $year = $year-1;
                           $activity_id=$client_id.'-'.$brand_id.'-'.$year.'-'.$month.'-'.$half;
                           $index=$this->multidimensional_search($result, array('my_month'=>(int)$month, 'half'=>$half,'my_year'=>$year));

                           if(!$result)
                           {
                               $index="notfound";
                           }
                           if($index==="notfound")
                               {
                                    $my_activity=new Activity();
                                    $my_activity->setClient($client);
                                    $my_activity->setWYear($year);
                                    $my_activity->setWMonth($month);
                                    $my_activity->setWHalf($half);
                                   
                                    $emptyActivity=true;
                                   $obj=$this->FormateActivity($filters,$my_activity,null,$activity_id,$client_id,$brand_id,$year,$month,$emptyActivity);
                                  // $halfItem[] = $obj;
                                  $activites[$year][]=$obj;
                               }else
                               {
                                   //activity found 
                                   $result[$index]['id']=$activity_id;
                                   $my_activity=$result[$index]['activity'];
                                   //dump($my_activity);echo $activity_id;die;
                                   //set last year flage true to set all node as readonly
                                   $emptyActivity=false;
                                   $obj=$this->FormateActivity($filters,$my_activity,null,$activity_id,$client_id,$brand_id,$year,$month,$emptyActivity);
                                   $activites[$year][]=$obj;

                               }
                          }
 

                        //dump($halfItem);die();
                       // $activites[]=array('value'=>$halfItem);

                    }
                }
                
                return $activites;
    }
    public function formateObj($name,$value,$type,$lastYear,$editType_type,$editType_options='null',$id=null,$extra=null,$isSub=null,$Statusvalue=null,$updatedBy=null,$updateAt=null,$msImpact=null,$user=null,$info=null)
    {      
        //check user permission
        // if hq edit only hq  and if gpv edit only gpv admin can edit both

        if($lastYear)
        {
            //set  all property readonly if last year
           // $type="readonly";
        }
        $obj=[
            'name'=>$value, //value of attri
            'type'=>$type,
            
            'editType'=>[
                        'type'=>$editType_type,
                        'options'=>$editType_options
                        ]
                    
            ];

        $obj['id']=null;  
        if($id!=null)
        {
            $obj['id']=$id;
        }

        if($isSub!=null)
        {
            $obj['isSub']=$isSub;
        }
        // if($Statusvalue!=null)
        // {
            $obj['statusvalue']=$Statusvalue;
       // }
       if($type=="gama")
       {
        // if($msImpact!=null)
        // {
            $obj['msImpact']=$msImpact;
       // }
       }

        if($type=="theme")
        {
            $obj['themeExtraInfo']=$info;
        }
      
        $obj['updatedBy']=$updatedBy;
        $obj['updateAt']=$updateAt;

        if($type=="shops")
        {
                if($user!=null)
                {
                        if($user->isAdmin())
                        {
                            //$readonly='notreadonly';
                            $obj['readonly']='notreadonly';
                        }
                        
                            //check if hq or gpv
                        $exploded_key=explode('_',$name);
                        if($exploded_key[0]==='hq')
                        {
                            $readonly=$user->isHq()?'notreadonly':'readonly';
                            $obj['readonly']=$readonly;
                        
                        }
                        if($exploded_key[0]==='gpv')
                        {
                            $readonly=$user->isGpv()?'notreadonly':'readonly';
                            $obj['readonly']=$readonly;
                        
                        }
            } 
       

        }
        
        return  $obj;
    }

    public function formateShopsObj($key,$name,$value,$user)
    {

        //admin
        if($user)
        {
            if($user->isAdmin())
            {
                return  [
                    'name'=>$name,
                    'type'=>'notreadonly',
                   
                    ];
            }
        }
    
        if($key==='shopsHqValue')
        {
            return  [
                'name'=>$name,
                'type'=>$user->isHq()?'notreadonly':'readonly'
               
                ];
        }
        if($key==='shopsGpvValue')
        {
            return  [
                'name'=>$name,
                'type'=>$user->isGpv()?'notreadonly':'readonly'
               
                ];
        }

  
  
       
    }


    //formate  eache property and  set flag
    public function formateActivity($filters,$my_activity,$lastYear,$activity_id,$client_id,$brand_id,$year,$month,$emptyActivity)
    {
       // $emptyActivity=false;
        //$my_activity=$this->getActivity(1,33,2018,7,1);
        //dump($my_activity->getHqShops());die;
        $obj['id']=$activity_id;

        //add status to titles
        $filters['titles']['status']='status';
      
       // dump($filters['titles']);die();
        foreach($filters['titles'] as $keyname=>$value)
        {
          // $my_activity=
            $name=$keyname;

            switch ($keyname) {

                //case "activity"
                //TO DO get sub shops in  4 month 2 half
                case 'hq_shops':
                $shops=[];
                if($emptyActivity ||(!$emptyActivity&&count($my_activity->getHqShops())<=0) ) 
                {
                    // die("dddd");
                    //if empty activity or empty shops return hq_6 had empty value  
                    $shops= $this->getEntityManager()->getRepository('AppBundle:Brand')->find($brand_id)->getChildrenName('hq_'); 
                   //$shops=['hq_6'=>$brand_id];
                }else
                {
                   // die("fff");
                    //subbrands return hq_6 had shops value 
                    $shops=$my_activity->getHqShops();  
                    //dump($shops);die;// $shops;
                }
              // dump($shops);die;
                //return  $shops;die;
                foreach ($shops as $key => $shop) 
                    {
                        $name=$key;
                        $value=$shop;
                        $type="shops";
                        $editType_type="number";
                        $obj[$key]=$this->formateObj($name,$value,$type,$lastYear,$editType_type,$editType_options='null',$id=null,$extra=null,$key,$Statusvalue=null,$updatedBy=null,$updateAt=null,$msImpact=null,$filters['user']);
                       
                    }
                  //  dump($obj[$key]);die;
                //get subbrand shops
                break;

                case 'gpv_shops':
                $shops=[];
                if($emptyActivity|(!$emptyActivity&&count($my_activity->getGpvShops())<=0))
                {
                    //if empty activity or empty shops 
                    $shops= $this->getEntityManager()->getRepository('AppBundle:Brand')->find($brand_id)->getChildrenName('gpv_'); 
                    //echo("empty");echo count($shops); echo "<br/>";
                }else
                {
                    //subbrands
                    $shops=$my_activity->getGpvShops();  
                }
                foreach ($shops as $key => $shop) 
                    {
                        $name=$key;
                        $value=$shop;
                        $type="shops";
                        $editType_type="number";
                        $obj[$key]=$this->formateObj($name,$value,$type,$lastYear,$editType_type,$editType_options='null',$id=null,$extra=null,$key,$Statusvalue=null,$updatedBy=null,$updateAt=null,$msImpact=null,$filters['user']);
                        //,$extra=null,$key,$Statusvalue=null,$updatedBy=null,$updateAt=null,$msImpact=null,$user=null)
                    }
                //dump($shops);die();
                 break;

                case 'total_shops':
                $shops=[];
                if($emptyActivity|(!$emptyActivity&&count($my_activity->getTotalShops())<=0))
                {
                    //if empty activity or empty shops 
                    $shops= $this->getEntityManager()->getRepository('AppBundle:Brand')->find($brand_id)->getChildrenName('total_'); 
                    //echo("empty");echo count($shops); echo "<br/>";
                }else
                {
                    //subbrands
                    $shops=$my_activity->getTotalShops();  
                }
                foreach ($shops as $key => $shop) 
                {
                    $name=$key;
                    $value=$shop;
                    $type="readonly";
                    $editType_type="number";
                    $obj[$key]=$this->formateObj($name,$value,$type,$lastYear,$editType_type);
                }
    
             break;

                case 'theme':
                $clientTheme=null;
                $updatedBy=null;
                $updateAt=null;
                $id=null;
                $info=null;
                // if($emptyActivity)
                // {
                //     $value="";
                    
                // }else
                // {
                    //get theme from general theme table by client_id,year,month,half
                   /// dump($my_activity);die;
                    $clientTheme= $this->getEntityManager()->getRepository('AppBundle:GeneralTheme')->getTheme($my_activity->getClient()->getId(),$my_activity->getWYear(),(int)$my_activity->getWMonth(),$my_activity->getWHalf());
                    
                    //echo $my_activity->getClient()->getId()."<br/>".$my_activity->getWYear()."<br/>".$my_activity->getWMonth()."<br/>".$my_activity->getWHalf();die;
                    //$value= $clientTheme;
                    $value="";
                    if($clientTheme)
                    {
                        if($clientTheme->getThemeId()!=null)
                        {
                            $value=$clientTheme->getThemeId()->getName();
                            $id=$clientTheme->getThemeId()!=null?$clientTheme->getThemeId()->getId():null;
                        }else{
                            $value=$clientTheme->getThemeExtraInfo();//info 
                            $id=null;
                        }
                        
                    }
               // }
                
                $type='theme';
                $editType_type="select";
                $editType_options="themes";
                //get activity theme
                //getTheme($client_id,$year,$month,$half)
                if($clientTheme)
                {
                    $updatedBy=$clientTheme->getLastUpdatedBy();
                    $updateAt=$clientTheme->getLastUpdatedDate();
                    $info=$clientTheme->getThemeExtraInfo();
                }
                //echo $clientTheme->getLastUpdatedBy();die;
                //$obj[$keyname]=$this->formateObj($name,$value,$type,$lastYear,$editType_type,$editType_options);
                //$clientTheme->getThemeId()==null?$clientTheme->getThemeId()->getId():null;
                $obj[$keyname]=$this->formateObj($name,$value,$type,$lastYear,$editType_type,$editType_options,$id,null,null,null,$updatedBy,$updateAt,null,null,$info);


                break;

                case 'header':
                if($emptyActivity){
                    $value="";
                    $id=null;
                }else
                {
                $value=$my_activity->getHeader()?$my_activity->getHeader()->getName():"";
                $id=$my_activity->getHeader()?$my_activity->getHeader()->getId():null;
                }
                $type='header';
                $editType_type="select";
                $editType_options="hedaers";
                $obj[$keyname]=$this->formateObj($name,$value,$type,$lastYear,$editType_type,$editType_options,$id);
              

                break;

                case 'offer':
                if($emptyActivity){
                    $value="";
                    $Statusvalue=1;
                }else{
                    $value=$my_activity->getOffer();
                    $Statusvalue=$my_activity->getStatus()?$my_activity->getStatus():"";
                }
                
                $type=$keyname;
                $editType_type="string";
                $editType_options="";
                //$obj[$keyname]=$this->formateObj($name,$value,$type,$lastYear,$editType_type,$editType_options,null,null,null,$Statusvalue);
                $updatedBy=$my_activity->getLastUpdatedBy();
                $updateAt=$my_activity->getLastUpdatedAt();
               // $fomate_updateAt=null;
                if($updateAt!=null)
                {
                   // $fomate_updateAt=date_format($updateAt, 'Y-m-d');
                }
                
                //$obj[$keyname]=$this->formateObj($name,$value,$type,$lastYear,$editType_type,$editType_options);

                $obj[$keyname]=$this->formateObj($name,$value,$type,$lastYear,$editType_type,$editType_options,null,null,null,$Statusvalue,$updatedBy,$updateAt);

                break;

                case 'gama':
                if($emptyActivity){
                    $value="";
                    $msImpact=null;
                }else{
                    $value=$my_activity->getGama();
                    $msImpact=$my_activity->getMsImpact()?$my_activity->getMsImpact()->getId():null;
                }
                
                $type=$keyname;
                $editType_type="string";
                $editType_options="";
                 $obj[$keyname]=$this->formateObj($name,$value,$type,$lastYear,$editType_type,$editType_options,null,null,null,null,null,null,$msImpact);
                

                break;

                case 'additional':
                if($emptyActivity){
                    $value="";
                }else{
                    $value=$my_activity->getAdditional();
                }
               
                $type=$keyname;
                $editType_type="string";
                $editType_options="";
                $obj[$keyname]=$this->formateObj($name,$value,$type,$lastYear,$editType_type,$editType_options);
                

                break;

                case 'exposition':
                if($emptyActivity){
                    $value="";
                }else{
                    $value=$my_activity->getExpositionQuality()?$my_activity->getExpositionQuality()->getName():"";
                }
               
                $type='exposition';
                $editType_type="select";
                $editType_options="expositions";
                 $obj[$keyname]=$this->formateObj($name,$value,$type,$lastYear,$editType_type,$editType_options);
                

                break;
                case 'kpi':
                if($emptyActivity){
                    $value="";
                }else{
                    $value=$my_activity->getKpi()?$my_activity->getKpi():"";
                }
               
                $type='kpi';
                $editType_type="number";
                $editType_options="";
                 $obj[$keyname]=$this->formateObj($name,$value,$type,$lastYear,$editType_type,$editType_options);
                

                break;

                case 'offe_quality':

                if($emptyActivity){
                    $value="";
                }else{
                    $value=$my_activity->getExpositionQuality()?$my_activity->getExpositionQuality()->getName():"";
                }
                
                $type='offe_quality';
                $editType_type="select";
                $editType_options="offe_qualitys";
                 $obj[$keyname]=$this->formateObj($name,$value,$type,$lastYear,$editType_type,$editType_options);
                
        
                break;

                case 'nr':
                if($emptyActivity){
                    $value="";
                }else{
                    $value=$this->getNr($client_id,$brand_id,$year,$month);
                }

               
                $type='readonly-merge';
                $editType_type="";
                $editType_options="";
                $obj[$keyname]=$this->formateObj($name,$value,$type,$lastYear,$editType_type,$editType_options);
                

                break;

                case 'fc':
                if($emptyActivity){
                    $value="";
                }else{
                    $value=$this->getFc($client_id,$brand_id,$year,$month);
                }
                
                $type='readonly-merge';
                $editType_type="";
                $editType_options="";
                $obj[$keyname]=$this->formateObj($name,$value,$type,$lastYear,$editType_type,$editType_options);
                
               
                break;

                case 'nr_vs_ly':
                if($emptyActivity){
                    $value="";
                }else{
                    $value=$this->getNrVsLy($client_id,$brand_id,$year,$month);
                }
                
                $type='readonly-merge';
                $editType_type="";
                $editType_options="";
                 $obj[$keyname]=$this->formateObj($name,$value,$type,$lastYear,$editType_type,$editType_options);
               

                break;

            //     case 'status':
            //    //echo$my_activity->getStatus(); die();
            //         if($emptyActivity)
            //         {
            //             $value="";
            //         }else{
            //             $value=$my_activity->getStatus()?$my_activity->getStatus():"";
            //         }
                
            //         $type='Status';
            //         $editType_type="number";
            //         $editType_options=null;
            //         $obj[$keyname]=$this->formateObj($name,$value,$type,$lastYear,$editType_type,$editType_options);
            //     break;         

              
            }
               

        }
       // dump($obj);die();
        return $obj;
    }


    //get activites in multi year and multi month  by client and brand
    public function getActivitiyData($mode,$id,$row,$filters)
    {
        $years=[];
        //current year start date and end date 
        $date=date("Y-m-d",mktime(0,0,0,$filters['start_month'],1,$filters['year']));     //2018-12-01
        $startdate= strtotime($date);                                                    //1543618800
        $enddata= strtotime($date. " +".$filters['number_month']."month");

        //last year start date and end date 
        $lastYeardate=date("Y-m-d",mktime(0,0,0,$filters['start_month'],1,($filters['year']-1)));     //2017-12-01
        $lastStartdate= strtotime($lastYeardate);                                                    //1543618800
        $lastEnddata= strtotime($lastYeardate. " +".$filters['number_month']."month");
        
        //get years
        $year=date('Y', $startdate);
        $nextYear=date('Y', $enddata);
        $years[]=$year; //2018
        $years[]=$year-1; //2017

        
        //get years
        if($year!=$nextYear)
        {
            $years[]=$nextYear; //2019
            //$years[]=$lastYear-1;

        }

        $client_id = $mode==0?$id:$row['id'];
        $brand_id  =  $mode==0?$row['id']:$id;

        $result=[];
        $query = $this->createQueryBuilder('a');
        $query->select('a as activity,a.id,a.wYear as my_year,a.wMonth as my_month,a.wHalf as half');
        $query->where('a.client=  :client_id');
        $query->setParameter('client_id', $client_id);
        //*********** TODO get from start and and date  ************* */
        //$months=$this->getMonthes($filters);
        $cond = array();
        $reng = array();
        $index=0;
        while ($startdate <= $enddata)
        {
     
          // echo date('m Y', $startdate); echo ("<br/>");
            $month=date('m', $startdate);
            $year=date('Y', $startdate);
            $lastYear=date('Y', $enddata);
            //$years[]=$year;
            $cond[] = "(a.wYear =  :year".$index." AND a.wMonth = :my_month".$index.")";
            $query->setParameter('year'.$index, $year);
            $query->setParameter('my_month'.$index, $month);
            //check last year
            $reng[] =[$year,$month];
            if($filters['show_last_year'])
            {
                //$years[]=$year-1;
                $index++;
                $cond[] = "(a.wYear =  :year".$index." AND a.wMonth = :my_month".$index.")";
                $reng[] =[($year-1),$month];
                $query->setParameter('year'.$index, ($year-1));
                $query->setParameter('my_month'.$index, $month);
            }

            $startdate = strtotime("+1 month", $startdate);
            $index++;
       
       }
     //  dump($reng);
    //     $cond2 = array();
    //     while ($lastStartdate <= $lastEnddata)
    //     {

    //         $lastmonth=date('m', $lastStartdate);
    //         $lastyear=date('Y', $lastStartdate);
    //         $cond2[] = "(a.wYear =  :year".$index." AND a.wMonth = :my_month".$index.")";
    //         $query->setParameter('year'.$index, $lastyear);
    //         $query->setParameter('my_month'.$index, $lastmonth);
    //         $lastStartdate = strtotime("+1 month", $lastStartdate);
    //         $index++;
    //    }
      // dump($cond);die;
       //end last year
        $query->andWhere(implode(" OR " , $cond));//current year cond
        //$query->andWhere(implode(" OR " , $cond2));//last year cond


        $query->andWhere('a.brand=  :brand_id');
        $query->setParameter('brand_id', $brand_id);

        // $query->andWhere('a.wYear in  (:years)');
        // $query->setParameter('years', $years);
        // $query->andWhere('a.wMonth in  (:my_month)');
        // $query->setParameter('my_month', $months);

        $query->orderBy('my_month','ASC');
        $query->addOrderBy('my_month','ASC');
        $query = $query->getQuery();
     
        $data['activites']=$query->getResult(); 
        $data['years']=$years; 
       // dump($data);die;
        return  $data;
    }

       //get activites in multi year and multi month  by client and brand
       public function getActivitiyDataExport($mode,$id,$row,$filters)
       {
           $years=[];
           //current year start date and end date 
           $date=date("Y-m-d",mktime(0,0,0,$filters['start_month'],1,$filters['year']));     //2018-12-01
           $startdate= strtotime($date);                                                    //1543618800
           $enddata= strtotime($date. " +".$filters['number_month']."month");
   
           //last year start date and end date 
           $lastYeardate=date("Y-m-d",mktime(0,0,0,$filters['start_month'],1,($filters['year']-1)));     //2017-12-01
           $lastStartdate= strtotime($lastYeardate);                                                    //1543618800
           $lastEnddata= strtotime($lastYeardate. " +".$filters['number_month']."month");
           
           //get years
           $year=date('Y', $startdate);
           $nextYear=date('Y', $enddata);
           $years[]=$year; //2018
           $years[]=$year-1; //2017
   
           
           //get years
           if($year!=$nextYear)
           {
               $years[]=$nextYear; //2019
               //$years[]=$lastYear-1;
   
           }
   
           $client_id = $mode==0?$id:$row->getId();
           $brand_id  =  $mode==0?$row->getId():$id;
   
           $result=[];
           $query = $this->createQueryBuilder('a');
           $query->select('a as activity,a.id,a.wYear as my_year,a.wMonth as my_month,a.wHalf as half');
           $query->where('a.client=  :client_id');
           $query->setParameter('client_id', $client_id);

           //*********** TODO get from start and and date  ************* */
           //$months=$this->getMonthes($filters);
           $cond = array();
           $reng = array();
           $index=0;
           while ($startdate <= $enddata)
           {
        
             // echo date('m Y', $startdate); echo ("<br/>");
               $month=date('m', $startdate);
               $year=date('Y', $startdate);
               $lastYear=date('Y', $enddata);
               //$years[]=$year;
               $cond[] = "(a.wYear =  :year".$index." AND a.wMonth = :my_month".$index.")";
               $query->setParameter('year'.$index, $year);
               $query->setParameter('my_month'.$index, $month);
               //check last year
               $reng[] =[$year,$month];
               if($filters['show_last_year'])
               {
                   //$years[]=$year-1;
                   $index++;
                   $cond[] = "(a.wYear =  :year".$index." AND a.wMonth = :my_month".$index.")";
                   $reng[] =[($year-1),$month];
                   $query->setParameter('year'.$index, ($year-1));
                   $query->setParameter('my_month'.$index, $month);
               }
   
               $startdate = strtotime("+1 month", $startdate);
               $index++;
          
          }
        //  dump($reng);
       //     $cond2 = array();
       //     while ($lastStartdate <= $lastEnddata)
       //     {
   
       //         $lastmonth=date('m', $lastStartdate);
       //         $lastyear=date('Y', $lastStartdate);
       //         $cond2[] = "(a.wYear =  :year".$index." AND a.wMonth = :my_month".$index.")";
       //         $query->setParameter('year'.$index, $lastyear);
       //         $query->setParameter('my_month'.$index, $lastmonth);
       //         $lastStartdate = strtotime("+1 month", $lastStartdate);
       //         $index++;
       //    }
         // dump($cond);die;
          //end last year
           $query->andWhere(implode(" OR " , $cond));//current year cond
           //$query->andWhere(implode(" OR " , $cond2));//last year cond
   
   
           $query->andWhere('a.brand=  :brand_id');
           $query->setParameter('brand_id', $brand_id);
   
           // $query->andWhere('a.wYear in  (:years)');
           // $query->setParameter('years', $years);
           // $query->andWhere('a.wMonth in  (:my_month)');
           // $query->setParameter('my_month', $months);
   
           $query->orderBy('my_month','ASC');
           $query->addOrderBy('my_month','ASC');
           $query = $query->getQuery();
        
           $data['activites']=$query->getResult(); 
           $data['years']=$years; 
         // dump($query->getResult());die;
           return  $data;
       }

 

        public function getActivity($client_id,$brand_id,$year,$month,$half)
        {
            $query = $this->createQueryBuilder('a');
            $query->where('a.client = :client_id');
            $query->setParameter('client_id', $client_id);
            $query->andWhere('a.brand=  :brand_id');
            $query->setParameter('brand_id', $brand_id);
            $query->andWhere('a.wHalf=  :wHalf');
            $query->setParameter('wHalf', $half);
            $query->setMaxResults(1);
            $query->andWhere('a.wMonth=  :wMonth');
            $query->setParameter('wMonth', $month);
            $query->andWhere('a.wYear=  :year');
            $query->setParameter('year', $year);
            $query = $query->getQuery();
           // dump($query->getOneOrNullResult());  die;
            return $query->getOneOrNullResult();
   
        }

        public function getOneActivity($client_id,$brand_id,$year,$month,$half)
        {
            //die($brand_id);die();
            $query = $this->createQueryBuilder('a');

            $query->where('a.client = :client_id');
            $query->setParameter('client_id', $client_id);

            $query->setMaxResults(1);
            $query->andWhere('a.brand=  :brand_id');
            $query->setParameter('brand_id', $brand_id);

            $query->andWhere('a.wHalf=  :wHalf');
            $query->setParameter('wHalf', $half);
            //$query->setMaxResults(1);
            $query->andWhere('a.wMonth=  :wMonth');
            $query->setParameter('wMonth', $month);

            $query->andWhere('a.wYear=  :year');
            $query->setParameter('year', $year);
            $query = $query->getQuery();
           $result= $query->getOneOrNullResult();
           return $result;
           
        }


        public function getActivityById($id)
        {
            //die($brand_id);die();
            $query = $this->createQueryBuilder('a');
            $query->where('a.id = :id');
            $query->setParameter('id', $id);

            $query = $query->getQuery();
           $result= $query->getResult();
            // dump();die();
            if(!$result)
            {
                return null;    
            }
           return $result[0];
        }

        public function getFirstActivity($client_id,$brand_id,$year,$month,$half)
        {
            //die($brand_id);die();
            $query = $this->createQueryBuilder('a');
            $query->where('a.client = :client_id');
            $query->setParameter('client_id', $client_id);

            $query->andWhere('a.brand=  :brand_id');
            $query->setParameter('brand_id', $brand_id);

            $query->andWhere('a.wHalf=  :wHalf');
            $query->setParameter('wHalf', $half);
            //$query->setMaxResults(1);
            $query->andWhere('a.wMonth=  :wMonth');
            $query->setParameter('wMonth', $month);

            $query->andWhere('a.wYear=  :year');
            $query->setParameter('year', $year);
            $query = $query->getQuery();
           $result= $query->getResult();
            // dump();die();
            
           return $result[0];
        }


        /**--------------------------------------------------------------get shops----------------------------------------------------------------------------------------- */

        //geShops get brand details and shops 
        public function getShopsRows($client_id,$filters,$user)
        {
            
            //get client details
            $client=$this->getEntityManager()->getRepository('AppBundle:Client')->find($client_id);
            $result['view']['name']=$client->getName();//['name'];
            $result['view']['value']=$client->getId();
            $result['view']['imageH']=$client->getImageH();
            $result['view']['maxShops']=$client->getMaxShops();
            $result['view']['data']['monthes']=$filters['translated_monthes'];
            
            //loop on all brands and subbrand if found to get shops by year and sort to set empty activity id
            //all_brands 
            $brands=$this->getEntityManager()->getRepository('AppBundle:Brand')->getbrandAndsubBrands();
            //dump($brands)
            //loop on brands 
            foreach ($brands as $key => $row) {

                if(count($row)!=0 && $row!=null)
                {

                    $result['rows'][$key]['name']=$row->getName();
                    $result['rows'][$key]['value']=$row->getId();
                   //get shops of brand
                   $result['rows'][$key]['data']=$this->getSortedShops($client_id,$row,$filters,$user);
                   $result['rows'][]=$this->getSortedShops($client_id,$row,$filters,$user);
                   //dump($result) ; die("sdsd");
                }        
         
                }
                
                return $result;
        } 

        function multidimensional_search($parents, $searched) { 
            if (empty($searched) || empty($parents)) { 
              return false; 
            } 
          
            foreach ($parents as $key => $value) { 
              $exists = true; 
              foreach ($searched as $skey => $svalue) { 
                $exists = ($exists && IsSet($parents[$key][$skey]) && $parents[$key][$skey] == $svalue); 
              } 
              if($exists){ 
                  return $key; 
                } 
            } 
          
            return "notfound"; 
          }
    


    //sort activites list and add empty activites per row (brand or client)
    public function  getSortedShops($client_id,$row,$filters,$user)
    {

            $brand_id=$row->getId();
            $year=$filters['year'];
            $activity_id;
            $result=[];
            $data=[];

            $result=$this->getShops($client_id,$brand_id,$filters,$year);
            //$result=$this->getShops(1,8,$filters,2018);
           //dump($result);die("getSortedShops");
                //loopmonthes
              //  $months=$this->getMonthes($filters);//$filters['translated_monthes'];//$this->getMonthes($filters);
                //dump($months);die;/
                // for ($monthindex=0; $monthindex < count($months) ; $monthindex++)
                // {
                   // foreach ($months as $monthKey => $monthKey) {
                $months=$this->getMonthsRang($filters);//$filters['translated_monthes'];
                //dump($months);die;
                    foreach ($months as $rang) 
                    {
                        $month= $rang['month'];
                        $year=$rang['year'];
                     
                   // dump("dsdsd");die();
                    //loop half
                    for ($half=1; $half <=2 ; $half++)
                     {

                        //loop  on years
                            $activity_id=$client_id.'-'.$brand_id.'-'.$year.'-'.$month.'-'.$half;
                            //TODO get year from date 
                            $index=$this->multidimensional_search($result, array('my_month'=>$month,'half'=>$half,'my_year'=>$year));
                           // echo $index;die();
                           if(!$result)
                           {
                               $index="notfound";
                           }
                            if($index==="notfound")
                                {
                                    $activity=[
                                        "id" => $activity_id,
                                        "my_year" => '',
                                        "my_month" => '',
                                        "half" => '',
                                        "shopsHqValue" =>$this->formateShopsObj('shopsHqValue','','',$user),
                                        "shopsGpvValue" =>$this->formateShopsObj('shopsGpvValue','','',$user)
                                    ];
                                    //die(" not found");
                                    //craete activity id and push empty activity
                                    //$halfItem[] =['id'=>$activity_id];
                                    $data[]=$activity;
                                }else
                                {

                                    $result[$index]['id']= $activity_id;
                                    
                                    $activity= $result[$index];
                                    foreach ($activity as $shopskey=>$value) {
                                        if($shopskey==='shopsHqValue'||$shopskey==='shopsGpvValue')
                                        {
                                            $activity[$shopskey]= $this->formateShopsObj($shopskey,$value,'',$user);//['name'=>(int)$value] ;
                                        }
                                    }

                                    $data[]=$activity;

                                 }
                    }
                }
                return $data;

    }


    public function getShops($client_id,$brand_id,$filters,$year)
    {
        //dump($filters);die();

         $date=date("Y-m-d",mktime(0,0,0,$filters['start_month'],1,$filters['year']));     //2018-12-01
         $startdate= strtotime($date);                                                    //1543618800
         $enddata= strtotime($date. " +".$filters['number_month']."month");
        

        $query = $this->createQueryBuilder('a');
        $query->select('a.id,a.wYear as my_year,a.wMonth as my_month,a.wHalf as half,sh.shopsHqValue,sh.shopsGpvValue');

        $query->where('a.client=  :client_id');
        $query->setParameter('client_id', $client_id);

        $query->andWhere('sh.brand=  :brand_id');
        $query->setParameter('brand_id', $brand_id);

        // $query->andWhere('a.wYear =  :year');
        // $query->setParameter('year', $year);

        // $query->andWhere('a.wMonth in  (:my_month)');
        // $query->setParameter('my_month', $months);
       $cond = array();
       $index=0;
        while ($startdate <= $enddata)
        {
     
          //echo date('m Y', $startdate); echo ("<br/>");
           $month=date('m', $startdate);
           $year=date('Y', $startdate);

           //echo $month ."-".$year."<br/>";
           $cond[] = "(a.wYear =  :year".$index." AND a.wMonth = :my_month".$index.")";
          //$query->andWhere('a.wYear =  :year AND a.wMonth = :my_month');
            
            $query->setParameter('year'.$index, $year);
            $query->setParameter('my_month'.$index, $month);

            
            $startdate = strtotime("+1 month", $startdate);
            $index++;
       }
        $query->andWhere(implode(" OR " , $cond));
        //dump(implode(" OR " , $cond));die;
        $query->orderBy('my_month','ASC');
        $query->addOrderBy('my_month','ASC');

        //$query->groupBy('my_month');
        //$query->addGroupBy('half');

        $query->innerJoin('a.shops', 'sh');
        $query = $query->getQuery();
        //dump($query->getSql());die();
        $shops= $query->getResult();
      //  dump($shops);die();
     
        return  $shops;
        
    }

    
    public function getMonthsRang($filters)
    {
         $date=date("Y-m-d",mktime(0,0,0,$filters['start_month'],1,$filters['year']));     //2018-12-01
        // dump($date);die;
         $startdate= strtotime($date);                                                    //1543618800
         $enddata= strtotime($date. " +".$filters['number_month']."month");
         $rang=[];
        while ($startdate < $enddata)
        {
           $month=date('m', $startdate);
           $year=date('Y', $startdate);
           $month=date('m', $startdate);

           $rang[] =["month"=>$month,"year"=>$year];
           $startdate = strtotime("+1 month", $startdate);

       }
       //dump($rang);die;
       $lastDate=date("Y-m-d",mktime(0,0,0,$filters['start_month'],1,$filters['year']-1));     //2018-12-01
        // dump($date);die;
         $lastYearstartdate= strtotime($lastDate);                                                    //1543618800
         $lastYearEnddate= strtotime($lastDate. " +".$filters['number_month']."month");
         
      /* if($filters['show_last_year'])
        {
            //die("dsds");
            while ($lastYearstartdate < $lastYearEnddate)
            {
    
               $month=date('m', $lastYearstartdate);
               $year=date('Y', $lastYearstartdate);
               $year=date('Y', $lastYearstartdate);
               $month=date('m', $lastYearstartdate);
              // $rang[(int)$month] =(int)$year;
               //$rang[] =["month"=>$month,"year"=>$year];
            //    if($filters['show_last_year'])
            //     {
                    //die("sds");
                   // $rang[(int)$month] =(int)($year-1);
                $rang[] =["month"=>$month,"year"=>$year];
               // }
               $lastYearstartdate = strtotime("+1 month", $lastYearstartdate);
    
           }

        }*/
    return $rang;
       
    }




}
