<?php

namespace AppBundle\Controller;

use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Nelmio\ApiDocBundle\Annotation\ApiDoc;
use AppBundle\Service\Validate;
use AppBundle\Entity\Brand;
use AppBundle\Entity\Client;
use AppBundle\Entity\Activity;
use AppBundle\Entity\Theme;
use AppBundle\Entity\GeneralTheme;
use FOS\RestBundle\Controller\Annotations;
use FOS\RestBundle\Controller\Annotations\RouteResource;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
use Symfony\Component\Translation\Translator;
use FOS\RestBundle\Routing\ClassResourceInterface;
use FOS\RestBundle\Controller\FOSRestController;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\ParamConverter;
use AppBundle\Form\ThemeType;



class ThemeController extends Controller
{
    use ApiResponseTrait;

  /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @param Request $request
     * @Annotations\Post("api/theme/client/list",name="list_theme")
     * @Annotations\View(serializerGroups={
     *   "show_theme"
     * })
     */
    public function listClientThemes(Request $request)
    {       
         //get id
         $data=$request->getContent();
         $activityData = json_decode($data);
         $id=$activityData->activity_id;
         $explodedId=explode('-',$id);

       //get activity or create 
       $client_id = $explodedId[0]; 
       $brand_id  = $explodedId[1];

       // die("list themes.....");
       // add empty theme 

        $res['data']=$this->getDoctrine()->getRepository('AppBundle:Theme')->getClientThems($client_id);
        return $res;
    }

    /**
     * @param Request $request
     * @Annotations\Get("api/theme/list",name="list_All_theme")
     * @Annotations\View(serializerGroups={
     *   "show_theme"
     * })
     */
    public function listAllThemes(Request $request)
    {       
       // die("list themes.....");
        $res['data']=$this->getDoctrine()->getRepository('AppBundle:Theme')->getAllThems();
        return $res;
    }






    /**
     * @param Request $request
     * @Annotations\Post("api/theme/add",name="add_theme")
     * @Annotations\View(serializerGroups={
     *   "show_activities"
     * })
     */
    public function addTheme(Request $request)
    {
       // die("dsds");
         $data=$request->getContent();
         $data = json_decode($data);

        //dump($data);die();
         $data=$request->getContent();
         $activityData = json_decode($data);
         $id=$activityData->activity_id;
         $explodedId=explode('-',$id);
         //get activity or create 
         $client_id = $explodedId[0]; 
         $brand_id  = $explodedId[1];
         $year      = $explodedId[2];
         $month     = $explodedId[3];

         //user info
         $user=$this->getUser();
         $client=$this->getDoctrine()->getRepository('AppBundle:Client')->find($client_id);
         $em = $this->getDoctrine()->getManager();
         if($client){
            $theme = new Theme();
            $form = $this->createForm(ThemeType::class, $theme);

            $form->submit($request->request->all());
    
            if ($form->isSubmitted() && $form->isValid()) {

                    //if activity found update theme
                
                    $theme->setClient($client);
                    $theme->setName($activityData->name);
                    if($activityData->imageH!='')
                    {
                        $theme->setimageH($activityData->imageH);
                    }
                    
                    $theme->setLastUpdatedBy($user);
                    $theme->setLastUpdatedAt(new \DateTime());
                    $em->persist($theme);
                    $em->flush();
                    return $this->apiResponse($theme,null ,200,$message='success');  
                    //return $this->apiResponse(null, 'success', 200);
             }

             return $form;
         }
      
   }

    /**
     * @param Request $request
     * @Annotations\Post("api/theme/edit/{id}",name="edit_theme")
     * @Annotations\View(serializerGroups={
     *   "show_activities"
     * })
     */
    public function editTheme(Request $request,$id)
    {

         $data=$request->getContent();
         $data = json_decode($data);
        // $client_id=$data->client_id;
         //user info
         $user=$this->getUser();
        $theme=$this->getDoctrine()->getRepository('AppBundle:Theme')->find($id);
        $em = $this->getDoctrine()->getManager();
         //if($client){
                //if activity found update theme
               // $theme = new Theme();
               // $theme->setClient($client);
                $theme->setName($data->name);
                if($activityData->imageH!='')
                {
                    $theme->setimageH($activityData->imageH);
                }
                $theme->setLastUpdatedBy($user);
                $theme->setLastUpdatedAt(new \DateTime());
                $em->persist($theme);
                $em->flush();
                return $this->apiResponse(null, 'success', 200);
         //}
      
   }

  


   /**
     * @param Request $request
     * @Annotations\Post("api/theme/select",name="select_theme")
     * @Annotations\View(serializerGroups={
     *   "add_theme"
     * })
     */
    public function selectTheme(Request $request)
    {

         //get id
         $data=$request->getContent();
         $activityData = json_decode($data);
         $id=$activityData->activity_id;

        // dump($activityData);die();
         //theme info 
         $theme_id=$activityData->theme; //theme id
         if($theme_id==null)
         {
            return $this->apiResponse(null,null ,400,'error');  
         }
         $theme=$this->getDoctrine()->getRepository('AppBundle:Theme')->find($activityData->theme);//theme entity
         //user info
         $user=$this->getUser();
         $explodedId=explode('-',$id);
         $client_id = $explodedId[0]; 
         $brand_id  = $explodedId[1];
         $year      = $explodedId[2];
         $month     = (int)$explodedId[3];
         $half      = $explodedId[4];

         //GET theme by client and year and month anf half of month
        $clientTheme=$this->getDoctrine()->getRepository('AppBundle:GeneralTheme')->getTheme($client_id,$year,(int)$month,$half);

       //dump($clientTheme);die();
        /**ckeck if user select theme or not  */
        //    if($activityData->theme!=-1)
        //     {
        //     $theme=$this->getDoctrine()->getRepository('AppBundle:Theme')->find($activityData->theme);
        //     }else{
        //         $theme=null;
        //     }
        //

        
        $client=$this->getDoctrine()->getRepository('AppBundle:Client')->find($client_id);
        $em = $this->getDoctrine()->getManager();
        //clear theme 
       if($clientTheme==null)
       {
           
           $clientTheme =new GeneralTheme();
           $clientTheme->setClientId($client);
           $clientTheme->setWYear($year);
           $clientTheme->setWMonth($month);
           $clientTheme->setWHalf($half);
           
    } 
        $clientTheme->setThemeExtraInfo($activityData->extraInfoTheme);
        $clientTheme->setLastUpdatedDate(new \DateTime());
        $clientTheme->setLastUpdatedBy($user);
        $clientTheme->setThemeId($theme);
        $em->persist($clientTheme);
        $em->flush();
        $data=[
            "lastUpdateBy"=>$clientTheme->getLastUpdatedBy(),
            "lastUpdateAt"=>$clientTheme->getLastUpdatedDate(),

        ];
        return $this->apiResponse($data,null ,200,'success');  
        //return $this->apiResponse(null, 'success', 200);

      
      
   }

       /**
     * @Annotations\Post("/add/{itinerary}")
     * @ParamConverter("itinerary", class="AppBundle:Itinerary")
     * @Security("has_role('ROLE_USER') ")
     */
    // public function PutItineraryReviewAction(Itinerary $itinerary, Request $request)
    // {
        // $review = new reviews();
        // $review->setItinerary($itinerary);
        // $user = $this->getUser();

        // $form = $this->createForm(reviewsType::class, $review);

        // $permissions = $this->get('app.itinerary.permission.service')->getPermissions($itinerary);
        // if (!$permissions['can_review']) {
        //     throw new AccessDeniedHttpException("You are not allowed to add review");
        // }
        // $em = $this->getDoctrine()->getManager();
        // $form->submit($request->request->all());


        // if ($form->isValid()) {
        //     $review->setItinerary($itinerary);
        //     $review->setUser($user);
        //     if ($review->getRate() > 5) {
        //         $review->setRate(5);
        //     }
        //     $em->persist($review);
        //     $em->flush();
        //     return $review->getId();
        // }
        // return $form;
    // }
    /**
     * @Route("/api/theme/delete",name="delete_theme")
     * @Annotations\View()
     * @Method({"Post"})
     */

    public function deleteTheme(Request $request)
    {
        $data=$request->getContent();
        $data = json_decode($data);
        $id=$data->id;

        $header=$this->getDoctrine()->getRepository('AppBundle:Theme')->find($id);
        $em=$this->getDoctrine()->getManager();
        $header->setFlag(1);
        $em->persist($header);
        $em->flush(); 
        return $this->apiResponse(null, 'success', 200);
    }



 
    
}
